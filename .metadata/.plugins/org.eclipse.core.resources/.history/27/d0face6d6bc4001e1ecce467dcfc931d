package dealership.negotiation.service;

import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import dealership.negotiation.controller.model.DealershipData;
import dealership.negotiation.controller.model.DealershipData.AutomakerData;
import dealership.negotiation.controller.model.DealershipData.CarData;
import dealership.negotiation.dao.AutomakerDao;
import dealership.negotiation.dao.CarDao;
import dealership.negotiation.dao.DealershipDao;
import dealership.negotiation.entity.Automaker;
import dealership.negotiation.entity.Car;
import dealership.negotiation.entity.Dealership;

@Service
public class NegotiationService {
	
	@Autowired AutomakerDao automakerDao;
	
	@Autowired CarDao carDao;
	
	@Autowired DealershipDao dealershipDao;
	
	@Transactional(readOnly = false)
	public DealershipData saveDealership(DealershipData dealershipData) {
		Dealership dealership = dealershipData.toDealership();
		Dealership dbDealership = dealershipDao.save(dealership);
		
		return new DealershipData(dbDealership);
	}
	
	@Transactional(readOnly = true)
	public DealershipData retrieveDealershipById(Long dealershipId) {
		Dealership dealership = findDealershipById(dealershipId);
		return new DealershipData(dealership);
	}

	private Dealership findDealershipById(Long dealershipId) {
		return dealershipDao.findById(dealershipId).orElseThrow(
				() -> new NoSuchElementException("Dealership with ID" + dealershipId + " was not found."));
	}
	
	@Transactional(readOnly = true)
	public List<DealershipData> retrieveAllDealerships() {
		List<Dealership> dealershipEntities = dealershipDao.findAll();
		List<DealershipData> dealershipDtos = new LinkedList<>();
		
		dealershipEntities.sort((loc1, loc2) -> loc1.getDealershipName().compareTo(loc2.getDealershipName()));
		
		for(Dealership dealership : dealershipEntities) {
			DealershipData dealershipData = new DealershipData(dealership);
			dealershipDtos.add(dealershipData);
		}
		
		return dealershipDtos;
	}
	
	@Transactional(readOnly = false)
	public void deleteDealership(Long dealershipId) {
		Dealership dealership = findDealershipById(dealershipId);
		dealershipDao.delete(dealership);
	}
	
//	public CarData saveCar(CarData carData) {
//		Car car = carData.toCar(); 	
//		Car dbCar = carDao.save(car);
//		
//		return new CarData(dbCar);
//	}
	
	private Car findCarById(Long carId) {
		return carDao.findById(carId).orElseThrow(
				() -> new NoSuchElementException("Car with ID" + carId + " was not found."));
	}
	
	@Transactional(readOnly = false)
	public void deleteCar(Long carId) {
		Car car = findCarById(carId);
		carDao.delete(car);
		
	}
	
	@Transactional(readOnly = false)
	public void deleteAutomaker(Long automakerId) {
		Automaker automaker = findAutomakerById(automakerId);
		automakerDao.delete(automaker);
	}

	private Automaker findAutomakerById(Long automakerId) {
		return automakerDao.findById(automakerId).orElseThrow(
				() -> new NoSuchElementException("Automaker with ID" + automakerId + " was not found."));
	}

	public Automaker saveAutomaker(AutomakerData automakerData) {
		Automaker automaker = automakerData.toAutomaker(); 	
		Automaker dbAutomaker = automakerDao.save(automaker);
		
		return new Automaker(dbAutomaker);
	}

	
}


//When a method returns an optional, must do an OrElseThrow